/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unesp.rc.classificaclientes.gui;

import br.unesp.rc.classificaclientes.model.Suporte;
import br.unesp.rc.classificaclientes.model.TipoSuporte;
import br.unesp.rc.classificaclientes.service.ServiceFactory;
import br.unesp.rc.classificaclientes.service.TipoSuporteService;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;

/**
 *
 * @author PICHAU
 */
public class Consulta10Mais extends javax.swing.JInternalFrame {

    /**
     * Creates new form Consulta10Mais
     */
    public Consulta10Mais() {
        initComponents();
    }

    public void exibir(){
            TipoSuporteService entity = ServiceFactory.getTipoSuporteService();
        TipoSuporte categoria;
        int i;
        int cont = 0;
        long idTipoOcorrencia = 1;
        List<Suporte> lo;
        List<TipoSuporte> lista = new ArrayList<TipoSuporte>(); 
        TreeSet lista2 = new TreeSet();
    String[][] dados = new  String[10][4]; 

        /*Cria lista com os tipos de ocorrencias e ordena o numero de ocorrencias*/
        do
        {categoria = entity.recuperaTipoOcorrencia(idTipoOcorrencia);
         if(categoria != null)
         {lo = entity.recuperaSuporte(idTipoOcorrencia);
          lista.add(categoria);
          lista2.add(lo.size());
         }
         idTipoOcorrencia++;
        }while(categoria != null);

        /*Checa se lista de numero de ocorrencias esta vazia */
        Iterator iterator = lista2.descendingIterator();
        int element = (int) iterator.next();
        if(element == 0)
        {


        }
        else
        {
         int tam = lista.size();
         while(cont != 10)
         {/*procura tipo que possui numero de ocorrencias igual ao maior*/
          for(i=0;i<tam-cont;i++)
          {categoria = lista.get(i);
           if(categoria != null)
           {lo = entity.recuperaSuporte(categoria.getIdTipoSuporte());
            if(element == lo.size())
            {lista.remove(categoria);

    dados[cont][0] = categoria.getCategoria();
    dados[cont][1] = categoria.getDescricao();
    dados[cont][2] = " " + categoria.getGravidade();
    dados[cont][3] = " " + lo.size();
             cont++;
             if(cont == 10)
             {i = tam-cont;
             }
            }
           }
          }
          /*coloca o proximo valor maior de numero de ocorrencias*/
          if(iterator.hasNext() == true)
          {element = (int) iterator.next();
          }
         }
        }
    jTable1 = new javax.swing.JTable();

    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        dados,
        new String [] {
            "Nome", "Descrição", "Gravidade", "Numero de Ocorrencias"
        }
    ));

    jScrollPane1.setViewportView(jTable1);

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TipoSuporteService entity = ServiceFactory.getTipoSuporteService();
        TipoSuporte categoria;
        int i;
        int cont = 0;
        long idTipoOcorrencia = 1;
        List<Suporte> lo;
        List<TipoSuporte> lista = new ArrayList<TipoSuporte>();
        TreeSet lista2 = new TreeSet();
        String[][] dados = new  String[10][4];

        /*Cria lista com os tipos de ocorrencias e ordena o numero de ocorrencias*/
        do
        {categoria = entity.recuperaTipoOcorrencia(idTipoOcorrencia);
            if(categoria != null)
            {lo = entity.recuperaSuporte(idTipoOcorrencia);
                lista.add(categoria);
                lista2.add(lo.size());
            }
            idTipoOcorrencia++;
        }while(categoria != null);

        /*Checa se lista de numero de ocorrencias esta vazia */
        Iterator iterator = lista2.descendingIterator();
        int element = (int) iterator.next();
        if(element == 0)
        {

        }
        else
        {
            int tam = lista.size();
            while(cont != 10)
            {/*procura tipo que possui numero de ocorrencias igual ao maior*/
                for(i=0;i<tam-cont;i++)
                {categoria = lista.get(i);
                    if(categoria != null)
                    {lo = entity.recuperaSuporte(categoria.getIdTipoSuporte());
                        if(element == lo.size())
                        {lista.remove(categoria);

                            dados[cont][0] = categoria.getCategoria();
                            dados[cont][1] = categoria.getDescricao();
                            dados[cont][2] = " " + categoria.getGravidade();
                            dados[cont][3] = " " + lo.size();
                            cont++;
                            if(cont == 10)
                            {i = tam-cont;
                            }
                        }
                    }
                }
                /*coloca o proximo valor maior de numero de ocorrencias*/
                if(iterator.hasNext() == true)
                {element = (int) iterator.next();
                }
            }
        }
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            dados,
            new String [] {
                "Nome", "Descrição", "Gravidade", "Numero de Ocorrencias"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
